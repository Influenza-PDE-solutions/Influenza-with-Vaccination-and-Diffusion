# spectra method for Influenza SVEIR PDE model

library(deSolve)
# Format of output
#
# ip = 1 - graphical (plotted) solutions vs x with
# t as a parameter
#
# ip = 2 - graphical solutions vs t at specific x
#
ip=1;
#
# Grid in x
nx=61;xl=-3;xu=3;
xg=seq(from=xl,to=xu,by=(xu-xl)/(nx-1));
#
# Grid in t
if(ip==1){nout=11;t0=0;tf=60;}
if(ip==2){nout=61;t0=0;tf=60;}
# if(ip==2){nout=61;t0=0;tf=2000;}
tout=seq(from=t0,to=tf,by=(tf-t0)/(nout-1));
#
# functions instead of dct libraries 
dct2 <- function(x) {
  N <- length(x)
  X <- numeric(N)
  for (k in 0:(N - 1)) {
    X[k + 1] <- sum(x * cos(pi * (2 * (0:(N - 1)) + 1) * k / (2 * N)))
  }
  X[1] <- X[1] / sqrt(2)
  return(sqrt(2 / N) * X)
}
idct2 <- function(X) {
  N <- length(X)
  x <- numeric(N)
  X[1] <- X[1] * sqrt(2)
  for (n in 0:(N - 1)) {
    x[n + 1] <- sum(X * cos(pi * (2 * n + 1) * (0:(N - 1)) / (2 * N)))
  }
  return(sqrt(2 / N) * x)
}

 
d2_dx2_spectral <- function(u, L = 6) {
  N <- length(u)
  k <- pi * (0:(N - 1)) / (2 * L)
  u_hat <- dct2(u)
  uxx_hat <- - (k^2) * u_hat
  return(idct2(uxx_hat))
}

d3_dx2_spectral <- function(u) {
  N <- length(u)
  uxx <- numeric(N)
  uxx[1] <- (2 * u[2] - 2 * u[1]) / dx^2
  uxx[N] <- (2 * u[N - 1] - 2 * u[N]) / dx^2
  for (i in 2:(N - 1)) {
    uxx[i] <- (u[i - 1] - 2 * u[i] + u[i + 1]) / dx^2
  }
  return(uxx)
}

#first conditions
S0 <- 0.86 * exp(-(x / 1.4)^2)
V0 <- 0.10 * exp(-(x / 1.4)^2)
I0 <- 0.04 * exp(-x^2)
E0 <- rep(0, nx)
R0 <- rep(0, nx)
y0 <- c(S0, V0, E0, I0, R0)

# model
sveir_rhs <- function(t, y, parms) {
  nx <- length(y) / 5
  S <- y[1:nx]
  V <- y[(nx+1):(2*nx)]
  E <- y[(2*nx+1):(3*nx)]
  I <- y[(3*nx+1):(4*nx)]
  R <- y[(4*nx+1):(5*nx)]
  # parameters  
  beta <- 0.5140; betae <- 0.25; betai <- 1
  betav <- 0.9; phi <- 1/20; theta <- 1/365
  alpha <- 9.3e-6; gamma <- 1/5; delta <- 1/365
  r <-  1.140e-05; kappa <- 1.857e-4
  sigma <- 1/2
  d1 <- 0.05; d2 <- 0.05; d3 <- 0.025; d4 <- 0.001; d5 <- 0
  # conditions with time  
  Sxx <- d2_dx2_spectral(S)
  Vxx <- d2_dx2_spectral(V)
  Exx <- d3_dx2_spectral(E)
  Ixx <- d3_dx2_spectral(I)
  Rxx <- d2_dx2_spectral(R)
  
  ES <- E * S; IS <- I * S
  EV <- E * V; IV <- I * V
  IE <- I * E; IR <- I * R
  St <- -beta*betae*ES - beta*betai*IS + alpha*IS - phi*S - r*S + delta*R + theta*V + r + d1*Sxx
  Vt <- -beta*betae*betav*EV - beta*betai*betav*IV + alpha*IV - r*V - theta*V + phi*S + d2*Vxx
  Et <- beta*betae*ES + beta*betai*IS + beta*betae*betav*EV + beta*betai*betav*IV + alpha*IE - (r + kappa + sigma)*E + d3*Exx
  It <- sigma*E - (r + alpha + gamma)*I + alpha*I^2 + d4*Ixx
  Rt <- kappa*E + gamma*I - r*R - delta*R + alpha*IR + d5*Rxx
  
  return(list(c(St, Vt, Et, It, Rt)))
}

# integration
out <- ode(y = y0, times = times, func = sveir_rhs,
           parms = NULL, method = "lsoda", atol = 1e-10, rtol = 1e-10)

nrow(out)
ncol(out)

#
# Arrays for plotting numerical solutions
S_xplot=matrix(0,nrow=nx,ncol=nout);
V_xplot=matrix(0,nrow=nx,ncol=nout);
E_xplot=matrix(0,nrow=nx,ncol=nout);
I_xplot=matrix(0,nrow=nx,ncol=nout);
R_xplot=matrix(0,nrow=nx,ncol=nout);
for(it in 1:nout){
  for(ix in 1:nx){
    S_xplot[ix,it]=out[it,ix+1];
    V_xplot[ix,it]=out[it,ix+1+nx];
    E_xplot[ix,it]=out[it,ix+1+2*nx];
    I_xplot[ix,it]=out[it,ix+1+3*nx];
    R_xplot[ix,it]=out[it,ix+1+4*nx];
  }
}

#
# Display numerical solutions (for t = 0, 60)
if(ip==1){
  for(it in 1:nout){
    if((it-1)*(it-11)==0){
      cat(sprintf("\n\n t x S(x,t)
V(x,t)"));
      cat(sprintf("\n E(x,t) I(x,t)
R(x,t)"));
      for(ix in 1:nx){
        cat(sprintf("\n %6.1f%7.2f%12.5f%12.5f",
                    tout[it],xg[ix],S_xplot[ix,it],V_xplot[ix,it]));
        cat(sprintf("\n%14.5f%12.5f%12.5f",
                    E_xplot[ix,it],I_xplot[ix,it],R_xplot[ix,it]));
      }
    }
  }
}
if(ip==2){
  for(it in 1:nout){
    if((it-1)*(it-61)==0){
      cat(sprintf("\n\n t x S(x,t)
V(x,t)"));
      cat(sprintf("\n E(x,t) I(x,t)
R(x,t)"));
      for(ix in 1:nx){
        cat(sprintf("\n %6.1f%7.2f%12.5f%12.5f",
                    tout[it],xg[ix],S_xplot[ix,it],V_xplot[ix,it]));
        cat(sprintf("\n%14.5f%12.5f%12.5f",
                    E_xplot[ix,it],I_xplot[ix,it],R_xplot[ix,it]));
      }
    }
  }
}
#
# Calls to ODE routine
cat(sprintf("\n\n ncall = %5d\n\n",ncall));

# Plot S,V,E,I,R numerical solutions
#
# vs x with t as a parameter, t = 0,6,...,60
if(ip==1){
  par(mfrow=c(1,1));
  matplot(x=xg,y=S_xplot,type="l",xlab="x",
          ylab="S(x,t), t=0,6,...,60",xlim=c(xl,xu),
          lty=1,main="S(x,t); t=0,6,...,60;",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=xg,y=V_xplot,type="l",xlab="x",
          ylab="V(x,t), t=0,6,...,60",xlim=c(xl,xu),
          lty=1,main="V(x,t); t=0,6,...,60;",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=xg,y=E_xplot,type="l",xlab="x",
          ylab="E(x,t), t=0,6,...,60",xlim=c(xl,xu),
          lty=1,main="E(x,t); t=0,6,...,60;",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=xg,y=I_xplot,type="l",xlab="x",
          ylab="I(x,t), t=0,6,...,60",xlim=c(xl,xu),
          lty=1,main="I(x,t); t=0,6,...,60;",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=xg,y=R_xplot,type="l",xlab="x",
          ylab="R(x,t), t=0,6,...,60",xlim=c(xl,xu),
          lty=1,main="R(x,t); t=0,6,...,60;",lwd=2);
}
#
# vs t at x = 0, t = 0,1,...,60
if(ip==2){
  S_tplot=rep(0,nout);V_tplot=rep(0,nout);
  E_tplot=rep(0,nout);I_tplot=rep(0,nout);
  R_tplot=rep(0,nout);
  for(it in 1:nout){
    S_tplot[it]=S_xplot[31,it];
    V_tplot[it]=V_xplot[31,it];
    E_tplot[it]=E_xplot[31,it];
    I_tplot[it]=I_xplot[31,it];
    R_tplot[it]=R_xplot[31,it];
  }
  par(mfrow=c(1,1));
  matplot(x=tout,y=S_tplot,type="l",xlab="t",
          ylab="S(x,t), x = 0",xlim=c(t0,tf),lty=1,
          main="S(x,t); x = 0",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=tout,y=V_tplot,type="l",xlab="t",
          ylab="V(x,t), x = 0",xlim=c(t0,tf),lty=1,
          main="V(x,t); x = 0",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=tout,y=E_tplot,type="l",xlab="t",
          ylab="E(x,t), x = 0",xlim=c(t0,tf),lty=1,
          main="E(x,t); x = 0",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=tout,y=I_tplot,type="l",xlab="t",
          ylab="I(x,t), x = 0",xlim=c(t0,tf),lty=1,
          main="I(x,t); x = 0",lwd=2);
  par(mfrow=c(1,1));
  matplot(x=tout,y=R_tplot,type="l",xlab="t",
          ylab="R(x,t), x = 0",xlim=c(t0,tf),lty=1,
          main="R(x,t); x = 0",lwd=2);
}