# strang_method1_style.R — updated Method 2 with Method 1 logic

# Load source files
source("flu_reaction.R")
source("flu_diffusion.R")  # must return du
source("dss004.R")
source("dss044.R")

# Output mode: 1 = plot vs x, 2 = plot vs t at x = 0


# Grid setup
nx = 61; xl = -3; xu = 3
xg = seq(xl, xu, length.out = nx)

# Time setup
# Set plotting mode:
# ip = 1 → plot vs x at fixed times
# ip = 2 → plot vs t at fixed x
ip <- 1  # or 2

# Time setup
t0 <- 0
tf <- 60

# Choose fewer representative time points (e.g. 10 parabolas)
if (ip == 1) {
  nout <- 241
  tout <- seq(from = t0, to = tf, length.out = nout)
}

if (ip == 2) {
  nout <- 61
  tout <- seq(from = t0, to = tf, length.out = nout)
}

dt <- tout[2] - tout[1]


# Parameters
beta = 0.5140; betae = 0.250; betai = 1; betav = 0.9
sigma = 1/2; gamma = 1/5; delta = 1/365
mu = 5.50e-08
r = 1.140e-05; kappa = 1.857e-04; alpha = 9.30e-06
theta = 1/365; phi = 1/20
d1 = 0.05; d2 = 0.05; d3 = 0.025; d4 = 0.001; d5 = 0

# Initial condition
u = rep(0, 5 * nx)
for (ix in 1:nx) {
  u[ix]         = 0.86 * exp(-(xg[ix] / 1.4)^2)
  u[ix + nx]    = 0.10 * exp(-(xg[ix] / 1.4)^2)
  u[ix + 2*nx]  = 0
  u[ix + 3*nx]  = 0.04 * exp(-xg[ix]^2)
  u[ix + 4*nx]  = 0
}
u = pmin(u, 1)

# Solution matrix
sol_matrix = matrix(0, nrow = 5 * nx, ncol = nout)
sol_matrix[, 1] = u

# Strang splitting using RK4 + diffusion loop
substeps = 20
dt_sub = dt / substeps

for (i in 2:nout) {
  # Step 1: half reaction (RK4)
  u_half1 = ode(y = u, times = c(0, dt/2), func = flu_reaction,
                parms = NULL, method = "rk4")[2, -1]
  
  # Step 2: full diffusion using substeps
  # Step 2: full diffusion using substeps
  u_tmp = u_half1
  
  # Define the diffusion wrapper here
  flu_diff <- function(u_in) {
    flu_diffusion(t = 0, u = u_in, parms = NULL)[[1]]
  }
  
  for (k in 1:substeps) {
    du = flu_diff(u_tmp)
    u_tmp = u_tmp + dt_sub * du
    u_tmp = pmin(pmax(u_tmp, 0), 1)
  }
  u_diff = u_tmp
  
  
  # Step 3: second half reaction (RK4)
  u_next = ode(y = u_diff, times = c(0, dt/2), func = flu_reaction,
               parms = NULL, method = "rk4")[2, -1]
  
  u = u_next
  sol_matrix[, i] = u
}




# Split solution into components
S_xplot = matrix(0, nx, nout)
V_xplot = matrix(0, nx, nout)
E_xplot = matrix(0, nx, nout)
I_xplot = matrix(0, nx, nout)
R_xplot = matrix(0, nx, nout)

for (it in 1:nout) {
  S_xplot[, it] = sol_matrix[1:nx, it]
  V_xplot[, it] = sol_matrix[(nx+1):(2*nx), it]
  E_xplot[, it] = sol_matrix[(2*nx+1):(3*nx), it]
  I_xplot[, it] = sol_matrix[(3*nx+1):(4*nx), it]
  R_xplot[, it] = sol_matrix[(4*nx+1):(5*nx), it]
}

if(ip==1){
  for(it in 1:nout){
    if((it-1)*(it-11)==0){
      cat(sprintf("\n\n t x S(x,t)
V(x,t)"));
      cat(sprintf("\n E(x,t) I(x,t)
R(x,t)"));
      for(ix in 1:nx){
        cat(sprintf("\n %6.1f%7.2f%12.5f%12.5f",
                    tout[it],xg[ix],S_xplot[ix,it],V_xplot[ix,it]));
        cat(sprintf("\n%14.5f%12.5f%12.5f",
                    E_xplot[ix,it],I_xplot[ix,it],R_xplot[ix,it]));
      }
    }
  }
}
if(ip==2){
  for(it in 1:nout){
    if((it-1)*(it-61)==0){
      cat(sprintf("\n\n t x S(x,t)
V(x,t)"));
      cat(sprintf("\n E(x,t) I(x,t)
R(x,t)"));
      for(ix in 1:nx){
        cat(sprintf("\n %6.1f%7.2f%12.5f%12.5f",
                    tout[it],xg[ix],S_xplot[ix,it],V_xplot[ix,it]));
        cat(sprintf("\n%14.5f%12.5f%12.5f",
                    E_xplot[ix,it],I_xplot[ix,it],R_xplot[ix,it]));
      }
    }
  }
}
#
# Calls to ODE routine
cat(sprintf("\n\n ncall = %5d\n\n",ncall));

# Plot S,V,E,I,R numerical solutions
#
# vs x with t as a parameter, t = 0,6,...,60
if(ip == 1){
  # Choose time indices every 6 time units from full output
  step_interval <- 6
  t_indices <- which((tout %% step_interval) == 0)
  
  # Subset S, V, E, I, R to those times
  S_sub <- S_xplot[, t_indices]
  V_sub <- V_xplot[, t_indices]
  E_sub <- E_xplot[, t_indices]
  I_sub <- I_xplot[, t_indices]
  R_sub <- R_xplot[, t_indices]
  
  # Plot each variable
  par(mfrow=c(1,1))
  matplot(x = xg, y = S_sub, type = "l", xlab = "x", ylab = "S(x,t)",
          xlim = c(xl, xu), lty = 1, lwd = 2, main = "S(x,t); t=0,6,...,60")
  
  matplot(x = xg, y = V_sub, type = "l", xlab = "x", ylab = "V(x,t)",
          xlim = c(xl, xu), lty = 1, lwd = 2, main = "V(x,t); t=0,6,...,60")
  
  matplot(x = xg, y = E_sub, type = "l", xlab = "x", ylab = "E(x,t)",
          xlim = c(xl, xu), lty = 1, lwd = 2, main = "E(x,t); t=0,6,...,60")
  
  matplot(x = xg, y = I_sub, type = "l", xlab = "x", ylab = "I(x,t)",
          xlim = c(xl, xu), lty = 1, lwd = 2, main = "I(x,t); t=0,6,...,60")
  
  matplot(x = xg, y = R_sub, type = "l", xlab = "x", ylab = "R(x,t)",
          xlim = c(xl, xu), lty = 1, lwd = 2, main = "R(x,t); t=0,6,...,60")
  
  
  # Print selected values for those time slices
  for(it in plot_indices){
    cat(sprintf("\n\n t = %6.1f", tout[it]));
    cat(sprintf("\n  x      S(x,t)      V(x,t)      E(x,t)      I(x,t)      R(x,t)"));
    for(ix in 1:nx){
      cat(sprintf("\n%6.2f  %10.5f  %10.5f  %10.5f  %10.5f  %10.5f",
                  xg[ix], S_xplot[ix,it], V_xplot[ix,it], E_xplot[ix,it],
                  I_xplot[ix,it], R_xplot[ix,it]));
    }
  }
}




#
# vs t at x = 0, t = 0,1,...,60
if(ip==2){
  # Extract values at x = 0 (i.e., ix = 31 for xg[31] = 0)
  S_tplot = rep(0, nout); V_tplot = rep(0, nout);
  E_tplot = rep(0, nout); I_tplot = rep(0, nout);
  R_tplot = rep(0, nout);
  
  for(it in 1:nout){
    S_tplot[it] = S_xplot[31, it];
    V_tplot[it] = V_xplot[31, it];
    E_tplot[it] = E_xplot[31, it];
    I_tplot[it] = I_xplot[31, it];
    R_tplot[it] = R_xplot[31, it];
  }
  
  # Plot S, V, E, I, R at x = 0 vs t
  par(mfrow=c(1,1));
  matplot(x=tout, y=S_tplot, type="l", xlab="t", ylab="S(x,t), x = 0",
          xlim=c(t0,tf), lty=1, main="S(x,t); x = 0", lwd=2);
  matplot(x=tout, y=V_tplot, type="l", xlab="t", ylab="V(x,t), x = 0",
          xlim=c(t0,tf), lty=1, main="V(x,t); x = 0", lwd=2);
  matplot(x=tout, y=E_tplot, type="l", xlab="t", ylab="E(x,t), x = 0",
          xlim=c(t0,tf), lty=1, main="E(x,t); x = 0", lwd=2);
  matplot(x=tout, y=I_tplot, type="l", xlab="t", ylab="I(x,t), x = 0",
          xlim=c(t0,tf), lty=1, main="I(x,t); x = 0", lwd=2);
  matplot(x=tout, y=R_tplot, type="l", xlab="t", ylab="R(x,t), x = 0",
          xlim=c(t0,tf), lty=1, main="R(x,t); x = 0", lwd=2);
  
  # Print numerical values of all variables for all time steps
  for(it in 1:nout){
    cat(sprintf("\n\n t = %6.1f", tout[it]));
    cat(sprintf("\n  x      S(x,t)      V(x,t)      E(x,t)      I(x,t)      R(x,t)"));
    for(ix in 1:nx){
      cat(sprintf("\n%6.2f  %10.5f  %10.5f  %10.5f  %10.5f  %10.5f",
                  xg[ix], S_xplot[ix,it], V_xplot[ix,it], E_xplot[ix,it],
                  I_xplot[ix,it], R_xplot[ix,it]));
    }
  }
}


# Print number of function calls (reaction ODE calls)
cat(sprintf("\n\n ncall = %5d\n\n", ncall))
