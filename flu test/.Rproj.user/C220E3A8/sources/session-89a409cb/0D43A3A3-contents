library(deSolve)
# functions instead of dct library 
dct <- function(x) {
  N <- length(x)
  x_ext <- c(x, rev(x))
  X <- fft(x_ext)
  Re(X[1:N]) / 2
}

idct <- function(X) {
  N <- length(X)
  X_full <- complex(length = 2*N)
  X_full[1] <- X[1]
  X_full[2:N] <- X[2:N] + 1i * 0
  X_full[(2*N):(N+2)] <- rev(X[2:N]) - 1i * 0
  x <- fft(X_full, inverse = TRUE)/ (2*N)
  Re(x[1:N])
}


d2_dx2_spectral <- function(u) {
  N <- length(u)
  k <- pi * (0:(N-1)) / 3  # المجال [-3, 3]
  u_hat <- dct(u)
  uxx_hat <- -k^2 * u_hat
  uxx <- idct(uxx_hat)
  N <- length(u)
  uxx <- numeric(N)
  uxx[1] <- (2 * u[2] - 2 * u[1]) / dx^2
  uxx[N] <- (2 * u[N - 1] - 2 * u[N]) / dx^2
  for (i in 2:(N - 1)) {
    uxx[i] <- (u[i - 1] - 2 * u[i] + u[i + 1]) / dx^2
  }
  return(uxx)
}

#first conditions
nx <- 200
x <- seq(-3, 3, length.out = nx)
times <- seq(0, 60, by = 6)


S0 <- 0.86 * exp(-(x / 1.4)^2)
V0 <- 0.10 * exp(-(x / 1.4)^2)
I0 <- 0.04 * exp(-x^2)
E0 <- rep(0, nx)
R0 <- rep(0, nx)
y0 <- c(S0, V0, E0, I0, R0)

# model
sveir_rhs <- function(t, y, parms) {
  nx <- length(y) / 5
  S <- y[1:nx]
  V <- y[(nx+1):(2*nx)]
  E <- y[(2*nx+1):(3*nx)]
  I <- y[(3*nx+1):(4*nx)]
  R <- y[(4*nx+1):(5*nx)]
# parameters  
  beta <- 0.5140; betae <- 0.25; betai <- 1
  betav <- 0.9; phi <- 1/20; theta <- 1/365
  alpha <- 9.3e-6; gamma <- 1/5; delta <- 1/365
  r <-  1.140e-05; kappa <- 1.857e-4
  sigma <- 1/2
  d1 <- 0.05; d2 <- 0.05; d3 <- 0.025; d4 <- 0.001; d5 <- 0
# conditions with time  
  Sxx <- d2_dx2_spectral(S)
  Vxx <- d2_dx2_spectral(V)
  Exx <- d2_dx2_spectral(E)
  Ixx <- d2_dx2_spectral(I)
  Rxx <- d2_dx2_spectral(R)
  
  ES <- E * S; IS <- I * S
  EV <- E * V; IV <- I * V
  IE <- I * E; IR <- I * R
  
  St <- -beta*betae*ES - beta*betai*IS + alpha*IS - phi*S - r*S + delta*R + theta*V + r + d1*Sxx
  Vt <- -beta*betae*betav*EV - beta*betai*betav*IV + alpha*IV - r*V - theta*V + phi*S + d2*Vxx
  Et <- beta*betae*ES + beta*betai*IS + beta*betae*betav*EV + beta*betai*betav*IV + alpha*IE - (r + kappa + sigma)*E + d3*Exx
  It <- sigma*E - (r + alpha + gamma)*I + alpha*I^2 + d4*Ixx
  Rt <- kappa*E + gamma*I - r*R - delta*R + alpha*IR + d5*Rxx
  
  return(list(c(St, Vt, Et, It, Rt)))
}

# integration 
out <- ode(y = y0, times = times, func = sveir_rhs,
           parms = NULL, method = "lsoda", atol = 1e-10, rtol = 1e-10)

#plot 

times_to_plot <- seq(0, 60, by = 6)
S_plot <- matrix(0, nrow = nx, ncol = length(times_to_plot))
for (i in seq_along(times_to_plot)) {
  t_index <- which(abs(out[, "time"] - times_to_plot[i]) < 1e-6)
  S_plot[, i] <- out[t_index, 2:(nx+1)]
}

matplot(x, S_plot, type = "l", lty = 1, lwd = 2,
        xlab = "x", ylab = "S(x,t)",
        col = rainbow(length(times_to_plot)),
        main = "S(x,t) for t = 0,6,...,60")
legend("topright", legend = paste0("t=", times_to_plot),
       col = rainbow(length(times_to_plot)), lty = 1, lwd = 2, cex = 0.7)

R_plot <- matrix(0, nrow = nx, ncol = length(times_to_plot))
for (i in seq_along(times_to_plot)) {
  t_index <- which.min(abs(out[, "time"] - times_to_plot[i]))
  R_plot[, i] <- out[t_index, (4 * nx + 1):(5 * nx)]
}

matplot(x, R_plot, type = "l", lty = 1, lwd = 2,
        xlab = "x", ylab = "R(x,t)",
        col = rainbow(length(times_to_plot)),
        main = "R(x,t); t = 0,6,...,60")
legend("topright", legend = paste0("t=", times_to_plot),
       col = rainbow(length(times_to_plot)), lty = 1, lwd = 2, cex = 0.7)


V_plot <- matrix(0, nrow = nx, ncol = length(times_to_plot))
for (i in seq_along(times_to_plot)) {
  t_index <- which.min(abs(out[, "time"] - times_to_plot[i]))
  V_plot[, i] <- out[t_index, (nx + 1):(2 * nx)]
}

matplot(x, V_plot, type = "l", lty = 1, lwd = 2,
        xlab = "x", ylab = "V(x,t)",
        col = rainbow(length(times_to_plot)),
        main = "V(x,t); t = 0,6,...,60")
legend("topright", legend = paste0("t=", times_to_plot),
       col = rainbow(length(times_to_plot)), lty = 1, lwd = 2, cex = 0.7)

E_plot <- matrix(0, nrow = nx, ncol = length(times_to_plot))
for (i in seq_along(times_to_plot)) {
  t_index <- which.min(abs(out[, "time"] - times_to_plot[i]))
  E_plot[, i] <- out[t_index, (2 * nx + 1):(3 * nx)]
}

I_plot <- matrix(0, nrow = nx, ncol = length(times_to_plot))
for (i in seq_along(times_to_plot)) {
  t_index <- which.min(abs(out[, "time"] - times_to_plot[i]))
  I_plot[, i] <- out[t_index, (3 * nx + 1):(4 * nx)]
}

matplot(x, E_plot, type = "l", lty = 1, lwd = 2,
        xlab = "x", ylab = "E(x,t)",
        col = rainbow(length(times_to_plot)),
        main = "E(x,t); t = 0,6,...,60")
legend("topright", legend = paste0("t=", times_to_plot),
       col = rainbow(length(times_to_plot)), lty = 1, lwd = 2, cex = 0.7)

matplot(x, I_plot, type = "l", lty = 1, lwd = 2,
        xlab = "x", ylab = "I(x,t)",
        col = rainbow(length(times_to_plot)),
        main = "I(x,t); t = 0,6,...,60")
legend("topright", legend = paste0("t=", times_to_plot),
       col = rainbow(length(times_to_plot)), lty = 1, lwd = 2, cex = 0.7)

#plot with x equal 0 
x0_index <- which.min(abs(x))

S_xt0 <- out[, 1 + x0_index]
V_xt0 <- out[, nx + x0_index]
E_xt0 <- out[, 2 * nx + x0_index]
I_xt0 <- out[, 3 * nx + x0_index]
R_xt0 <- out[, 4 * nx + x0_index]

plot(times, S_xt0, type = "l", col = "black", lwd = 2,
     xlab = "t", ylab = "S(0,t)", main = "S at x = 0")

plot(times, V_xt0, type = "l", col = "black", lwd = 2,
     xlab = "t", ylab = "V(0,t)", main = "V at x = 0")

plot(times, E_xt0, type = "l", col = "black", lwd = 2,
     xlab = "t", ylab = "E(0,t)", main = "E at x = 0")

plot(times, I_xt0, type = "l", col = "black", lwd = 2,
     xlab = "t", ylab = "I(0,t)", main = "I at x = 0")

plot(times, R_xt0, type = "l", col = "black", lwd = 2,
     xlab = "t", ylab = "R(0,t)", main = "R at x = 0")
